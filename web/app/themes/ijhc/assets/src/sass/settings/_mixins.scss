@use "sass:map";
@use "curves";
@use "functions";
@use "units";

// --------------------------------------------------------------------------
// Gestion des breakpoints (Media queries)
// --------------------------------------------------------------------------

@mixin from($breakpoint) {
	@if map.has-key(units.$breakpoints, $breakpoint) {
		@media (min-width: map.get(units.$breakpoints, $breakpoint)) {
			@content;
		}
	} @else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. Available breakpoints are: #{map.keys(units.$breakpoints)}.";
	}
}

@mixin until($breakpoint) {
	@if map.has-key(units.$breakpoints, $breakpoint) {
		@media (max-width: map.get(units.$breakpoints, $breakpoint) - 1) {
			@content;
		}
	} @else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. Available breakpoints are: #{map.keys(units.$breakpoints)}.";
	}
}

@mixin between($breakpoint_min, $breakpoint_max) {
	@if map.has-key(units.$breakpoints, $breakpoint_min) and
		map.has-key(units.$breakpoints, $breakpoint_max)
	{
		@media (min-width: map.get(units.$breakpoints, $breakpoint_min)) and (max-width: map.get(units.$breakpoints, $breakpoint_max) - 1) {
			@content;
		}
	} @else {
		@warn "Unfortunately, no value could be retrieved.";
	}
}

// --------------------------------------------------------------------------
// Grid Layout
// --------------------------------------------------------------------------

@mixin display($display) {
	@if $display == 'grid' {
		& {
			$grid-margin: functions.fluid-size(calc(16 - (#{units.$column-gap}px), calc(80 - (#{units.$column-gap}px))));
			display: grid;
			grid-template-columns:
				minmax($grid-margin, auto) repeat(
					12,
					minmax(
						0,
						calc((#{units.$container-max-width}px - (#{units.$column-gap}px * 11)) / 12)
					)
				)
				minmax($grid-margin, auto);
			grid-auto-columns: auto;
			grid-auto-rows: min-content;
			grid-auto-flow: dense;
			column-gap: #{units.$column-gap}px;

			> * {
				grid-column: 2/-2;
			}
		}
	}
}

/// Make a context based selector a little more friendly
/// Usage : @include when-inside('.container-name')
@mixin when-inside($contexts) {
	@each $state, $context in $contexts {
		#{$state} & {
			@content;
		}
	}
}

// -----------------------------------------------------------------------------
// Flex layout
// -----------------------------------------------------------------------------

@mixin center {
	display: inline-flex;
	flex-direction: row;
	flex-wrap: nowrap;
	justify-content: center;
	align-items: center;
}

@mixin x-center {
	display: inline-flex;
	flex-direction: row;
	flex-wrap: nowrap;
	justify-content: center;
}

@mixin y-center {
	display: inline-flex;
	flex-direction: row;
	flex-wrap: nowrap;
	align-items: center;
}

@mixin row {
	display: flex;
	flex-direction: row;
	flex-wrap: nowrap;
}

@mixin row-wrap {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
}

@mixin col {
	display: flex;
	flex-direction: column;
	flex-wrap: nowrap;
}

@mixin col-wrap {
	display: flex;
	flex-direction: column;
	flex-wrap: wrap;
}

// --------------------------------------------------------------------------
// Fluid size
// --------------------------------------------------------------------------

@mixin fluid-size($property, $mobile-size, $desktop-size) {
	@media screen and (max-width: #{units.$mobile-width}px) {
		#{$property}: functions.rem($mobile-size);
	}

	@media screen and (min-width: #{units.$mobile-width}px) and (max-width: #{units.$desktop-width}px) {
		#{$property}: functions.fluid-size($mobile-size, $desktop-size);
	}

	@media screen and (min-width: #{units.$desktop-width}px) {
		#{$property}: functions.rem($desktop-size);
	}
}

@mixin button($style: null) {
	@include center;
	height: functions.rem(72);
	min-height: functions.rem(72);
	padding: 0 functions.rem(32);
	font-weight: 600;
	color: var(--color--yellow);
	background-color: var(--color--white);
	border: none;
	border-radius: functions.rem(32);
	cursor: pointer;
	transition: filter 0.35s curves.$ease;

	&:hover {
		filter: brightness(90%);
	}

	@include until(md) {
		width: 100%;
	}
}
